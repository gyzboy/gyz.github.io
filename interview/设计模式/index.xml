<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on gyz的十万个为什么</title>
    <link>https://gyzboy.github.io/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on gyz的十万个为什么</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 16:12:16 +0800</lastBuildDate><atom:link href="https://gyzboy.github.io/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://gyzboy.github.io/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>概述 创建型 单例（Singleton） 简单工厂（Simple Factory） Implementation 工厂方法（Factory Method） Implementation 抽象工厂（Abstract Factory） Implementation 生成器（Builder） 原型模式（Prototype） 行为型 责任链（Chain Of Responsibility） 命令（Command） 解释器（Interpreter） 迭代器（Iterator） 中介者（Mediator） 备忘录（Memento） 观察者（Observer） 状态（State） 策略（Strategy） 模板方法（Template Method） 访问者（Visitor） 空对象（Null） 结构型 适配器（Adapter） 桥接（Bridge） 组合（Composite） 装饰（Decorator） 外观（Facade） 享元（Flyweight） 代理（Proxy） 概述 设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。
拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。
创建型 单例（Singleton） Intent 确保一个类只有一个实例，并提供该实例的全局访问点。
Class Diagram 使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。
私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。
Ⅰ 懒汉式-线程不安全 以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。
这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 if (uniqueInstance == null) ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 uniqueInstance = new Singleton(); 语句，这将导致实例化多次 uniqueInstance。</description>
    </item>
    
  </channel>
</rss>
