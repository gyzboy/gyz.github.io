<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openGL on 十万个为什么</title>
    <link>https://gyzboy.github.io/interview/opengl/</link>
    <description>Recent content in openGL on 十万个为什么</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 16:12:16 +0800</lastBuildDate><atom:link href="https://gyzboy.github.io/interview/opengl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>openGL</title>
      <link>https://gyzboy.github.io/interview/opengl/opengl/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/opengl/opengl/</guid>
      <description>基本概念  着色器 顶点着色器 片元着色器 坐标系 图形的绘制 投影 光照 纹理映射 渲染流程   绘制一个图形的步骤  1.绑定GLSurfaceView 2.创建shape并加载   变化矩阵   基本概念    着色器    着色器（Shader）是在GPU上运行的小程序
顶点着色器    把每个顶点在虚拟空间中的三维坐标变换为可以在屏幕上显示的二维坐标，并带有用于z-buffer的深度信息。顶点着色器可以操作的属性有：位置、颜色、纹理坐标，但是不能创建新的顶点
片元着色器    片元着色器计算每个像素的颜色和其它属性。它通过应用光照值、凹凸贴图，阴影，镜面高光，半透明等处理来计算像素的颜色并输出。它也可改变像素的深度(z-buffering)或在多个渲染目标被激活的状态下输出多种颜色。一个片元着色器不能产生复杂的效果，因为它只在一个像素上进行操作，而不知道场景的几何形状
坐标系    OpenGL ES采用的是右手坐标，选取屏幕中心为原点，从原点到屏幕边缘默认长度为1，也就是说默认情况下，从原点到（1,0,0）的距离和到（0,1,0）的距离在屏幕上展示的并不相同。即向右为X正轴方向，向左为X负轴方向，向上为Y轴正轴方向，向下为Y轴负轴方向，屏幕面垂直向上为Z轴正轴方向，垂直向下为Z轴负轴方向
图形的绘制    OpenGL ES2.0的世界里面只有点、线、三角形，其它更为复杂的几何形状都是由三角形构成的
投影    OpenGL ES中有两种投影方式：正交投影和透视投影。正交投影，物体不会随距离观测点的位置而大小发生变化。而透视投影，距离观测点越远，物体越小，距离观测点越近，物体越大
光照    光照由三种元素组成（也可以说是三种通道组成），分别为环境光、镜面光及散射光
 环境光是指从四面八方照射到物体上，其具体公式为：  环境光照射结果=材质反射系数∗环境光强度</description>
    </item>
    
  </channel>
</rss>
