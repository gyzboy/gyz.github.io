<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on gyz的十万个为什么</title>
    <link>https://gyzboy.github.io/interview/android/</link>
    <description>Recent content in Android on gyz的十万个为什么</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 16:12:16 +0800</lastBuildDate><atom:link href="https://gyzboy.github.io/interview/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JNI</title>
      <link>https://gyzboy.github.io/interview/android/jni/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/jni/</guid>
      <description>JNI加载流程 JNI环境配置 CmakeList文件解析 JNI作用？ JNI中注册方法的方式? JNI访问java对象 JNI中字符串操作 JNI中的引用 JNI加载流程 Gradle调用外部构建脚本CMklist.txt CMake按照脚本中的命令将C++源文件native-lib.cpp编译成native-lib.so动态库,并把它编译到APK中 运行时首先加载native-lib.so,然后调用相应的native方法 JNI环境配置 在Gradle配置文件俩个地方配置externalNativeBuild {}，一个在defaultConfig里面一个在defaultConfig外面
在defaultConfig外面的externalNativeBuild {}代码块用cmake制定了CMakeList.txt的路径 在defaultConfig里面的externalNativeBuild {}代码块用cmake主要是填写CMake命令参数 CmakeList文件解析 #配置加载头文件 include_directories(./src/main/cpp/include) file(GLOB main_src &amp;ldquo;src/main/cpp/*.cpp&amp;rdquo;) //定义main_src变量 add_library(native-lib SHARED native-lib.cpp) 可以定义多个库，CMake会构建他们，Gradle将自动把共享库打入APK中 第一个参数：设置这个库的名字 第二个参数：设置库的类型，SHARE 动态库.so后缀 ,STATIC 静态库 .a后缀 第三个参数：源文件的相对路径 find_library(log-lib log) 找到一个NDK库，并且把这个库的路径储存在一个变量中 第一个参数：变量名 第二个参数：使用的NDK原生库名称 target_link_libraries(native-lib ${log-lib})关联库，将指定的库关联起来 第一个参数：目标库 第二个参数：将目标库链接到日志库包含在NDK中。 set_target_properties(库名称 PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/libs/${ANDROID_ABI}/xxx.so) JNI作用？ 调用java函数：使用JNIEnv调用java中的代码 操作java对象：java对象传入jni层是jstring，可以使用JNIEnv来操作这个对象 JNI中注册方法的方式? 静态注册 Java+包名+类名+方法名 动态注册 加载动态库 java层通过System.loadLibrary()方法可以加载一个动态库,此时虚拟机就会调用jni库中的JNI_OnLoad()函数 注册函数 JNI_OnLoad()函数经常用来做一些初始化操作，动态注册就是在这里进行的,动态注册通过_JNIEnv的RegisterNatives()函数来完成 jint RegisterNatives(JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint nMethods); //第一个参数：JNIEnv *指针 //第二个参数：代表一个java类 //第三个参数：代表JNINativeMethod结构体数组，JNINativeMethod定义了java层函数和native层函数的映射关系 //第四个参数:代表第三个参数methods数组的大小 //return 0代表成功，负值代表失败 例子 jint native_text(JNIEnv *env, jobject jobject1, jstring msg) { return 0; } jint native_staic_text(JNIEnv *env, jobject jclass1, jstring meg) { return 0; } static const JNINativeMethod nativeMethod[] = { {&amp;#34;text&amp;#34;, &amp;#34;(Ljava/lang/String;)I&amp;#34;, (void *) native_text}, {&amp;#34;static_text&amp;#34;, &amp;#34;(Ljava/lang/String;)I&amp;#34;, (void *) native_staic_text} }; static int registNativeMethod(JNIEnv *env) { int result = -1; jclass class_text = env-&amp;gt;FindClass(&amp;#34;com.</description>
    </item>
    
    <item>
      <title>事件处理</title>
      <link>https://gyzboy.github.io/interview/android/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>Q:如何捕获activity中的所有点击事件? Q:说说view中的事件分发? Q:如果我只想有view的拖拽事件，而不想要view的点击事件，让你重写这个view的拖拽怎么设计? Q:里面的view在onTouchEvent中消费，然后拖动手指，直到手指从其他他viewgroup上挪开手指 Q:view的onTouch和onTouchEvent事件的区别？ Q:view的onClick事件在什么时候触发的，和onTouch有什么区别? Q:事件是先到window的还是先到decorview的,为什么这样设计? Q:一个点击事件是如何从屏幕传递到view的? Q:MotionEvent是什么?有什么用? Q:ACTION_CANCEL是如何触发的? Q:几个监听Lisner动作回调的优先级是如何? Q:滑动冲突如何解决? Q:Activity的分发方法中调用了onUserInteraction()方法，你能说说这个方法有什么作用吗？ Q:ViewGroup是如何将多个手指产生的事件准确分发给不同的子view的？ Q:dispatchTouchEvent\onInterceptTouchEvent\onTouchEvent中各返回值处理 Q:如何捕获activity中的所有点击事件? 事件分发方案。通过重写Activity的dispatchTouchEvent方法，对页面上的点击事件进行拦截。但是拦截不到Dialog中的点击事件，因为事件分发由DecorView开始发起，但是Dialog所处的DecorView和Activity的DecorView不是同一个，所以无法在Activitiy的dispatchTouchEvent方法进行拦截Dialog中的点击事件。 hook替换OnClickListener方案。这个方案主要是通过替换View中的mOnClickListener为我们自己的OnClickListener，然后进行点击事件的拦截处理。但是这个方案需要获取替换的那个View才行，所以新增的View和Dialog都需要单独处理才行。新增的View需要进行当前页面的View树进行监听，Dialog必须对Dialog中的View再进行一次hook。 AspectJ切面编程方案。这个方案是在编译期将代码插入到目标方法中，所以只要找到切点——也就是View中的onClick方法即可。可以完美解决我们的问题，并且不需要用户另外操作。 无障碍服务方案。这个方案是通过Android中的无障碍服务，对APP中的所有点击事件进行拦截，对应的事件就是AccessibilityEvent.TYPE_VIEW_CLICKED。该方案也能完美解决我们的问题，但是有个很大的缺点，就是需要用户单独去设置页面开启该辅助服务才行。 Q:说说view中的事件分发? ACTION_DOWN情况下:dispatchTouchEvent-&amp;gt;onIntercepterTouchEvenet-&amp;gt;onTouchEvent
Q:如果我只想有view的拖拽事件，而不想要view的点击事件，让你重写这个view的拖拽怎么设计? onTouchEvent中return true
Q:里面的view在onTouchEvent中消费，然后拖动手指，直到手指从其他他viewgroup上挪开手指 一旦事件点击序列传到了view中,这个序列中的所有操作都交给这个view去处理
Q:view的onTouch和onTouchEvent事件的区别？ onTouch指setOnTouchListener的回调方法，它是优先于onTouchEvent事件的,如果onTouch方法返回true，是不会触发onTouchEvent事件的
Q:view的onClick事件在什么时候触发的，和onTouch有什么区别? 在onTouchEvent中的ACTION_UP中触发的,onTouch是在dispatchTouchEvent中触发的
Q:事件是先到window的还是先到decorview的,为什么这样设计? 这样设计是为了解耦，Activity只持有phonewindow,ViewRootImpl只持有decorview,phonewindow可以把事件分发到decorview
Q:一个点击事件是如何从屏幕传递到view的? Q:MotionEvent是什么?有什么用? 一个MotionEvent对象内部使用一个数组来维护所有触控点的信息 UP/DOWN类型的事件包含了触控点索引，可以根据该索引做出对应的操作 触控点的索引是变化的，不能作为跟踪的依据，而必须依据触控点id
ACTION_DOWN: 表示手指按下屏幕 ACTION_MOVE: 手指在屏幕上滑动时，会产生一系列的MOVE事件 ACTION_UP: 手指抬起，离开屏幕、 ACTION_CANCEL：当出现异常情况事件序列被中断，会产生该类型事件 ACTION_POINTER_DOWN: 当已经有一个手指按下的情况下，另一个手指按下会产生该事件 ACTION_POINTER_UP: 多个手指同时按下的情况下，抬起其中一个手指会产生该事件 Q:ACTION_CANCEL是如何触发的? ViewGroup在onInterceptTouchEvent中对ACTION_MOVE或者ACTION_UP进行了拦截,子View的dispatchTouchEvent和onTouchEvent就接收到的是ACTION_CACEL
Q:几个监听Lisner动作回调的优先级是如何? if (mOnTouchListener!=null &amp;amp;&amp;amp; mTouchListener.onTouch(event)){ return true; }else{ if (单击事件){ mOnClickListener.onClick(view); }else if(长按事件){ mOnLongClickListener.onLongClick(view); } } Q:滑动冲突如何解决? 外部拦截法中，重点在于是否拦截事件，那么重心就放在了 onInterceptTouchEvent 方法中 内部拦截法中,首先是设置外部viewGroup拦截除了down事件以外的所有事件,接下来需要重写内部view的dispatchTouchEvent方法 Q:Activity的分发方法中调用了onUserInteraction()方法，你能说说这个方法有什么作用吗？ 这个方法在Activity接收到down的时候会被调用，本身是个空方法，需要开发者自己去重写</description>
    </item>
    
    <item>
      <title>动态化</title>
      <link>https://gyzboy.github.io/interview/android/%E5%8A%A8%E6%80%81%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E5%8A%A8%E6%80%81%E5%8C%96/</guid>
      <description>Q:Android与JS交互? Android调用js代码 JS调用Android代码 Q:J2V8引擎 Q:一个JSRuntime如何区分多个js环境? Q:设计一个动态化框架需要考虑什么 Q:Android与JS交互? Android调用js代码 通过WebView的loadUrl（） //会触发页面刷新 mWebView.loadUrl(&amp;#34;javascript:callJS()&amp;#34;); 通过WebView的evaluateJavascript（） //不会触发界面刷新,可以获取到返回结果 mWebView.evaluateJavascript（&amp;#34;javascript:callJS()&amp;#34;, new ValueCallback&amp;lt;String&amp;gt;() { @Override public void onReceiveValue(String value) { //此处为 js 返回的结果 } }); JS调用Android代码 通过WebView的addJavascriptInterface（）进行对象映射 //参数1：Javascript对象名 参数2：Java对象名 mWebView.addJavascriptInterface(new AndroidtoJs(), &amp;#34;test&amp;#34;);//AndroidtoJS类对象映射到js的test对象 通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url 通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息 Q:J2V8引擎 V8.createV8Runtime();//启动v8 v8.executeVoidScript(jsonJs);//读取js文件的string内容,将其注入到js引擎中 v8.registerJavaMethod(voidCallback,registName);//是否需要注册方法回调 v8.executeStringFunction(name, array);//执行对应方法 Q:一个JSRuntime如何区分多个js环境? 在js的全局环境中设置唯一标识defaultObject+index
Q:设计一个动态化框架需要考虑什么 通信方式 js调native 桥,通过JNI获取java中的方法,然后调用V8或者其它引擎的相关方法进行绑定 native调js 调用V8或者其他引擎的相关方法进行调用 性能 bundle加载 MRN: 1.拆包,meta.json中定义dependency,开始时只加载主包,然后加载业务包 2.包体积缩小,一是打包时引入Tree Shaking技术,裁剪无用代码,二是抽出公用模块 3.懒加载 首屏加载 渲染性能 MRN: 1.提前加载业务bundle,执行到业务时只需要进行短时间的渲染操作,V8在完成代码编译后，会以字节码的形式产出CodeCache，并可将其序列化到磁盘上。在下次编译时，可以提供CodeCache，会大大缩短代码的解析和编译时间 2.</description>
    </item>
    
    <item>
      <title>插件化&amp;热修复</title>
      <link>https://gyzboy.github.io/interview/android/%E6%8F%92%E4%BB%B6%E5%8C%96%E7%83%AD%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E6%8F%92%E4%BB%B6%E5%8C%96%E7%83%AD%E4%BF%AE%E5%A4%8D/</guid>
      <description>Q:Android中的ClassLoader? Q:Android中ClassLoader加载过程? Q:热修复方案? Q:插件化需要的技术 Q:Android打包流程 Q:Android中的ClassLoader? 系统类加载器 BootClassLoader java实现,包访问修饰符 PathClassLoader PathClassLoader来加载系统类和应用程序类 PathClassLoader通常用来加载已经安装的apk的dex文件（安装的apk的dex文件在/data/dalvik-cache) DexClassLoader DexClassLoader可以加载dex文件和包含dex文件的压缩文件（比如jar和apk文件），不管加载那种文件，最终都是加载dex文件 dexPath：dex相关文件的路径集合，多个文件用路径分割符分割，默认的文件分割符为 &amp;ldquo;:&amp;rdquo; optimizedDirectory:解压的dex文件储存的路径，这个路径必须是一个内部储存路径，一般情况下使用当钱应用程序的私有路径/data/data/Package Name/&amp;hellip; librarySearchPath:包含C++库的路径集合，多个路径用文件分割符分割，可以为null parent：父加载器 自定义加载器 Q:Android中ClassLoader加载过程? 新建DexPathList对象pathList 调用pathList.findClass 新建dexElements 遍历dexElements,调用element.findClass方法 获取DexFile对象dexFile,调用dexFile.findClass方法 Q:热修复方案? 底层替换方案 System.load：可以加载自定义路径下的so System.loadLibaray：用来加载已经安装APK中的so 类加载方案 在element.findClass时加载bugfix的包 给每个类中的方法插入一个public static的ChangeQuickRedirect对象对所有方法使用Javassist插入代码：当该方法的changeQuickRedirect不为空时，直接将参数直接传入PatchProxy的accessDispatchVoid/accessDispatch方法并返回， 这样做跳过了原方法后面的代码 Instant Run方案 创建新的AssetManager，并通过反射调用addAssetPath方法加载外部资源，这样新建的AssetManager就包含了外部资源 将AssetManager类型的mAsset字段的引用全部替换为新创建的AssetManager,主要是Resources中 Q:插件化需要的技术 Hook技术 用来启动指定组件,一般hook点为Instrumentation中的execStartActivity 通过静态代理ProxyInstrumentation获取到Instrumentation对象 通过反射执行execStartActivity的方法 通过反射将Activity中的Instrumentation对象替换为ProxyInstrumentation 插件的类加载 获取插件apk地址 传入插件apk地址新建插件类加载DexClassLoader对象 通过反射dexElements获取插件中的类 通过反射dexElements获取当前应用中的类 创建新的dexElements数组合并两个中的类 用新的数组替换应用dexElements中的数组 插件的资源加载 通过addAssetPath加载外部资源,再构建新的Resource替换Application中的Resource 启动插件Activity 使用占坑的Activity通过AMS中对AndroidManifest.xml的验证 hook execStartActivity时将intent替换为跳转到占坑Activity的intent,其中原始跳转intent存储在占坑intent中 hook ActivityThread中的mH,读取占坑intent中的原始intent,通过setCompnent加载原始intent Q:Android打包流程 打包资源文件 资源文件（res文件夹下的文件）通过 AAPT（Android Asset Packaging Tool）打包生成R.java类（资源索引表）以及.arsc资源文件。 经过aapt生成的R文件占4个字节 public static final int design_appbar_state_list_animator=0x7f020000; 第一位字节0x7f表示packageID,用来限定资源的来源。系统资源包是ox01，SharedLibrary类型资源包是0x00，普通App包则是0x7f； 次一位字节02表示typeID，用来表示资源类型，如drawable、layouts、anims、color、menu等； 后2字节0000表示EvtryID，指的是每一个资源在对应的TypID中出现的顺序。 aapt生成的.</description>
    </item>
    
    <item>
      <title>Activity</title>
      <link>https://gyzboy.github.io/interview/android/activity/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/activity/</guid>
      <description>Q:简述下Activity相关生命周期 Q:onStart调用后,用户就真正可以看见activity了吗? Q:Activity生命周期中,任务栈是怎么变化的 Q:onSaveInstance和onRestoreInstance的调用时机,系统会默认干些什么 Q:为什么不建议在onPause中处理耗时操作 Q:什么情况下activity会调用onPause Q:activity在onDestroy中做了什么？ Q:哪些是在activity清单文件配置中的必要元素,哪些是发布后不建议修改元素,为什么 Q:intent-filter过滤器是什么，有什么作用,其中各标签代表什么含义 Q:intent-filter是如何响应,然后启动activity的 Q:activity中的权限控制是怎么样的,详细解释下 Q:用户离开activity时,activity一定会被销毁吗？ Q:activity实例的销毁时机,系统会直接销毁activity吗 Q:setResult调用时机 Q:setResult可能会出现什么问题?如何解决？ Q:在有setResult时,activity的生命周期是什么样的? Q:activityA启动activityB时的生命周期?为什么要这样设计? Q:activity状态改变 Q:activity还有其他什么生命周期的函数,分别调用时机是什么时刻 Q:activity启动方式 Q:taskAffinity是做什么用的?有什么具体的应用场景? Q:如果一个A Activity（standard）启动B Activity（singleInstance），这个时候用户点击了手机最近访问列表，然后在再点击该App所在的界面（卡片），然后这个时候点击返回键,会发生什么?为什么? Q:任务，任务栈，前台任务栈，后台任务栈，返回栈分别是什么？ Q:有多少种操作activity任务堆栈的方式?操作的结果是什么？ Q:可以从后台启动activity吗?怎么做? Q:在不同的生命周期内调用finish的生命周期是怎么样的? Q:finish调用后会立刻调用onStop、onDestroy吗？不会的话,为什么? Q:如果App还存在缓存进程，这个时候启动App，应用Application的onCreate方法会执行吗？ Q:启动一个Dialog,activity生命周期是如何变化的?为什么? Q:onSaveInstance是如何实现保持应用状态的?如果在里面传递大量数据会发生什么? Q:onResume执行了就可以认为界面对用户可见了?这种理解对吗? Q:一个activity从创建到用户可见,经历了什么操作,涉及到了哪些生命周期? Q:什么情况下startActivity需要设置Flag=NEW_TASK?为什么?不设置的话会发生什么? Q:activity从启动到显示,都经历了什么? Q:Activity、PhoneWindow、DecorView、ViewRootImpl之间的关系? Q:activity在屏幕旋转后如何保持下载不中断? Q:startActivities是干什么用的?activity栈是如何变化的? Q:Activity启动模式与FLAG结合? Q:Flag使用具体使用? Q:子线程可以startActivity吗?会有什么问题? Q:简述下Activity相关生命周期 onCreate-&amp;gt;onRestart-&amp;gt;onStart-&amp;gt;onRestoreInstance-&amp;gt;onResume-&amp;gt;onPause-&amp;gt;onStop-&amp;gt;onRestrt-&amp;gt;onDestroy onSaveInstance onRestoreInstance
onCreate:Activity生命周期的第一个方法，也是我们在android开发中接触的最多的生命周期方法。它本身的作用是进行Activity的一些初始化工作，比如使用setContentView加载布局，对一些控件和变量进行初始化等，此时activity还在后台,不可见
onStart:对用户可见(这个可见指的是进程的可见),在此时包含activity进入前台与用户互动之前的最后准备工作
onResume:系统会在 Activity 开始与用户互动之前调用此回调。此时，该 Activity 位于 Activity 堆栈的顶部，并会捕获所有用户输入
onPause:Activity 失去焦点并进入“已暂停”状态
onStop:当 Activity 对用户不再可见时，系统会调用 onStop()
onRestart:当处于“已停止”状态的 Activity 即将重启时，系统就会调用此回调。onRestart() 会从 Activity 停止时的状态恢复 Activity。 此回调后面总是跟着 onStart()</description>
    </item>
    
    <item>
      <title>android整体框架相关</title>
      <link>https://gyzboy.github.io/interview/android/%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6/</guid>
      <description>Q:进程与应用生命周期之间的关系 Q:系统是如何管理这些进程的? Q:activity启动中都涉及到了哪些类?分别有什么作用？ Q:一个Activity是如何启动的? Q:AMS，Zogyte，App进程，Launcher之间是如何通信的？ Q:为啥Activity启动流程中，大部分都是用Binder通讯，为啥跟Zygote通信的时候要用socket呢？ Q:Android启动流程? Q:ioctl是啥,android哪里用到了? Q:StartActivity的流程?哪里可以做的插件化? Q:startService的启动流程? Q:BindService是什么?为什么 bindService 能和 Activity 的生命周期联动? Q:sendBroadcast原理?什么时候回发生ANR? JobScheduler是什么?有什么用? Q:说说WorkManager Q:ANR有哪些场景会发生? Q:用MultiDex解决何事？其根本原因在于？Dex如何优化？主Dex放哪些东西？主Dex和其他Dex调用、关联？Odex优化点在于什么? Q:在打包过程中如何产生多个的DEX包？ Q:如果做到动态加载，怎么决定哪些DEX动态加载呢？ Q:如果启动后在工作线程中做动态加载，如果没有加载完而用户进行页面操作需要使用到动态加载DEX中的class怎么办？ Q:多渠道打包如何实现(Flavor、Dimension应用)？从母包生出渠道包实现方法？渠道标识替换原理？ Q:Android打包哪些类型文件不能混淆? Q:进程与应用生命周期之间的关系 前台进程 它正在用户的互动屏幕上运行一个 Activity（其 onResume() 方法已被调用）。 它有一个 BroadcastReceiver 目前正在运行（其 BroadcastReceiver.onReceive() 方法正在执行）。 它有一个 Service 目前正在执行其某个回调（Service.onCreate()、Service.onStart() 或 Service.onDestroy()）中的代码。 可见进程 它正在运行的 Activity 在屏幕上对用户可见，但不在前台（其 onPause() 方法已被调用）。举例来说，如果前台 Activity 显示为一个对话框，而这个对话框允许在其后面看到上一个 Activity，则可能会出现这种情况。 它有一个 Service 正在通过 Service.startForeground()（要求系统将该服务视为用户知晓或基本上对用户可见的服务）作为前台服务运行。 系统正在使用其托管的服务实现用户知晓的特定功能，例如动态壁纸、输入法服务等。 服务进程 服务流程包含一个已使用 startService() 方法启动的 Service 缓存进程 目前不需要的进程,通常包含用户当前不可见的一个或多个 Activity 实例（onStop() 方法已被调用并返回） Q:系统是如何管理这些进程的? 这些进程保存在伪 LRU 列表中，列表中的最后一个进程是为了回收内存而终止的第一个进程。此列表的确切排序政策是平台的实现细节，但它通常会先尝试保留更多有用的进程（比如托管用户的主屏幕应用、用户最后看到的 Activity 的进程等），再保留其他类型的进程。</description>
    </item>
    
    <item>
      <title>ContentProvider</title>
      <link>https://gyzboy.github.io/interview/android/contentprovider/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/contentprovider/</guid>
      <description> Q:介绍下FileProvider？ Q:介绍下FileProvider？ &amp;lt;!-- 配置FileProvider--&amp;gt; &amp;lt;provider android:name=&amp;#34;androidx.core.content.FileProvider&amp;#34; android:authorities=&amp;#34;${applicationId}.provider&amp;#34; android:exported=&amp;#34;false&amp;#34;//这里必须为false android:grantUriPermissions=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;meta-data android:name=&amp;#34;android.support.FILE_PROVIDER_PATHS&amp;#34; android:resource=&amp;#34;@xml/provider_paths&amp;#34;/&amp;gt; &amp;lt;/provider&amp;gt; //provider_paths.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;paths xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&amp;gt; &amp;lt;external-path name=&amp;#34;external&amp;#34; path=&amp;#34;.&amp;#34;/&amp;gt; &amp;lt;/paths&amp;gt; </description>
    </item>
    
    <item>
      <title>Glide</title>
      <link>https://gyzboy.github.io/interview/android/glide/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/glide/</guid>
      <description>Q:Glide优势? Q:自己实现一个图片加载框架,需要考虑什么? Q:Glide中这几个点都是如何实现的? Q:Glide是如何加载动图的? Q:Glide中的缓存设计? Q:如何解决Glide缓存变化但图片没有更新问题? Q:Glide优势? 多种图片格式的缓存，适用于更多的内容表现形式（如Gif、WebP、缩略图、Video） 生命周期集成（根据Activity或者Fragment的生命周期管理图片加载请求） 通过为每个activity或者Fragment创建一个无界面的SupportRequestManagerFragment来进行生命周期的绑定 在创建SupportRequestManagerFragment时会讲一个当前对象存储在map中,这是因为事务的提交commitAllowingStateLoss是post到队列中,防止重新创建fragment 在创建RequestManager时获取SupportRequestManagerFragment的Lifecycle对象 高效处理Bitmap（bitmap的复用和主动回收，减少系统回收压力） decodeFromWrappedStreams中会调用BitmapPool复用池,通过inBitmap获取复用图片 高效的缓存策略，灵活（Picasso只会缓存原始尺寸的图片，Glide缓存的是多种规格），加载速度快且内存开销小（默认Bitmap格式的不同，使得内存开销是Picasso的一半） Q:自己实现一个图片加载框架,需要考虑什么? 异步加载：线程池 切换线程：Handler，没有争议吧 缓存：LruCache、DiskLruCache 防止OOM：软引用、LruCache、图片压缩、Bitmap像素存储位置 内存泄露：注意ImageView的正确引用，生命周期管理 列表滑动加载的问题：加载错乱、队满任务过多问题 Q:Glide中这几个点都是如何实现的? 异步加载 private GlideExecutor sourceExecutor; //加载源文件的线程池，包括网络加载 private GlideExecutor diskCacheExecutor; //加载硬盘缓存的线程池 ... private GlideExecutor animationExecutor; //动画线程池 Q:Glide是如何加载动图的? 从流里读取前3个字节用于判断是否为GIF图,确认为 GIF 动图后，会构建一个 GIF 的解码器（StandardGifDecoder），它可以从 GIF 动图中读取每一帧的数据并转换成 Bitmap，然后使用 Canvas 将 Bitmap 绘制到 ImageView 上，下一帧则利用 Handler 发送一个延迟消息实现连续播放，所有 Bitmap 绘制完成后又会重新循环，所以就实现了加载 GIF 动图的效果
优化方式 1、使用GIFLIB+双缓冲的实现,只会创建两个Bitmap,并且内存消耗非常之稳定 2、相比Glide的原生加载,当加载过大的GIF图时,超过了BitmapPool的可用大小,还是会直接创建Bitmap的. 3、使用GIFLIB是直接在native层对GIF数据进行解码的,这一点对Glide来说,效率和内存消耗情况都比较占优. 4、Glide 构建当前帧数据和下一帧数据是串行的,而 FrameSequenceDrawable 则是利用了双缓冲以及解码子线程来实现近似同步的完成上一帧和下一帧数据的无缝衔接的. Q:Glide中的缓存设计? 主要有四级缓存:
活动资源 (Active Resources)：正在使用的图片 采用一个存储了弱引用的HashMap来缓存活动资源 当我们从一屏滑动到下一屏的时候，上一屏的图片就会看不到，这个时候就从活动资源转为内存资源 我们关闭当前显示图片的页面时,会从活动资源转为内存资源 优势: 1.</description>
    </item>
    
    <item>
      <title>LeakCanary</title>
      <link>https://gyzboy.github.io/interview/android/leakcanary/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/leakcanary/</guid>
      <description> Q:Java中各种引用类型? 强引用 软引用 弱引用 虚引用 如何通过引用队列判断是否发生内存泄漏? LeakCanary原理? Q:Java中各种引用类型? 强引用 强引用是使用最普遍的引用。一个对象具有强引用，则在GC发生时，该对象将不会回收。当Jvm虚拟机内存空间不足时，虚拟机会抛出OutOfMemoryError错误，不会回收具有强引用的对象来解决内存不足的问题 软引用 当一个对象只有软引用，若虚拟机内存空间足够，垃圾回收器就不会回收该对象； 若内存空间不足，下次GC时这些只有软引用对象将被回收。若垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。 在创建软引用实例时，可以传入一个引用队列（ReferenceQueue）将该软引用与引用队列关联，这样当软引用所引用的对象被垃圾回收器回收前，Jvm虚拟机会把这个软引用加入到与之关联的引用队列中 弱引用 弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在GC发生时，若一个对象只有弱引用，不管虚拟机内存空间是否足够，都会回收它的内存。 在创建弱引用实例时，可以传入一个引用队列（ReferenceQueue）将该软引用与引用队列关联，这样当软引用所引用的对象被垃圾回收器回收前，Jvm虚拟机就会把这个软引用加入到与之关联的引用队列中 虚引用 虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 在创建虚引用实例时，可以传入一个引用队列（ReferenceQueue）将该软引用与引用队列关联，这样当软引用所引用的对象被垃圾回收器回收前，Jvm虚拟机就会把这个软引用加入到与之关联的引用队列中 String str = new String(&amp;#34;abc&amp;#34;); ReferenceQueue queue = new ReferenceQueue(); // 创建虚引用，要求必须与一个引用队列关联 PhantomReference pr = new PhantomReference(str, queue); 如何通过引用队列判断是否发生内存泄漏? 软引用、弱引用、虚引用的构造方法均可以传入一个ReferenceQueue与之关联。在引用所指的对象被回收后，引用（reference)本身将会被加入到ReferenceQueue之中，此时引用所引用的对象reference.get()已被回收 (reference此时不为null，reference.get()此时为null)。 所以，在一个非强引用所引用的对象回收时，如果引用reference没有被加入到被关联的ReferenceQueue中，则表示还有引用所引用的对象还没有被回收。如果判断一个对象的非强引用本该出现在ReferenceQueue中，实际上却没有出现，则表示该对象发送内存泄漏
LeakCanary原理? 在onDestory发生时创建一个弱引用指R向Activity，并关联一个RefrenceQuence,当Activity被正常回收，弱引用实例本身应该出现在该RefrenceQuence中，否则便可以判断该Activity存在内存泄漏。 通过Application.registerActivityLifecycleCallbacks()方法可以注册Activity生命周期的监听，每当一个Activity调用onDestroy进行页面销毁时，去获取到这个Activity的弱引用并关联一个ReferenceQuence，通过检测ReferenceQuence中是否存在该弱引用判断这个Activity对象是否正常回收。 当onDestory被调用后，初步观察到Activity未被GC正常回收时，手动触发一次GC，由于手动发起GC请求后并不会立即执行垃圾回收，所以需要在一定时延后再二次确认Activity是否已经回收，如果再次判断Activity对象未被回收，则表示Activity存在内存泄漏 当Activity的onDestory方法被调用后，LeakCanary将在RefWatcher的retainedKeys(CopyOnWriteArraySet)加入一条全局唯一的UUID，同时创建一个该Activityd的弱引用对象KeyedWeakReference，并将UUID写入KeyedWeakReference实例中，同时KeyedWeakReference与引用队列queue进行关联，这样当Activity对象正常回收时，该弱引用对象将进入队列当中。循环遍历获取queue队列中的KeyedWeakReference对象ref，将ref中的UUID取出，在retainedKeys中移除该UUID。如果遍历完成后retainedKeys中仍然存在该弱引用的UUID,则说明该Activity对象在onDestory调用后没有被正常回收。此时通过GcTrigger手动发起一次GC,再等待100ms，然后再次判断Activity是否被正常回收 </description>
    </item>
    
    <item>
      <title>OkHttp</title>
      <link>https://gyzboy.github.io/interview/android/okhttp/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/okhttp/</guid>
      <description>Q:OkHttp中用到了哪些设计模式 Q:OkHttp中用到了哪些设计模式 外观模式。通过okHttpClient这个外观去实现内部各种功能。 建造者模式。构建不同的Request对象。 工厂模式。通过OkHttpClient生产出产品RealCall。 享元模式。通过线程池、连接池共享对象。 责任链模式。将不同功能的拦截器形成一个链。</description>
    </item>
    
    <item>
      <title>RecyclerView</title>
      <link>https://gyzboy.github.io/interview/android/recyclerview/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/recyclerview/</guid>
      <description>Q:RecyclerView中onLayout有哪些步骤流程? Q:RecyclerView中是如何获取ViewHolder的？有哪些步骤流程? Q:什么是pre-layout?什么时候调用? Q:stableID是什么？有什么作用? Q:什么是Scrap？设计思想是什么? Q:mChangedScrap 和 mAttachedScrap区别? Q:如何实现RecyclerView的拖拽排序? Q:当item超过一定数量，如何正确的设置RecyclerView的maxHeight？ Q:RecyclerView中的复用的几个问题 Q:RecyclerView回收些什么? Q:RecyclerView中的ViewHolder回收到哪里去? Q:什么情况下,会调用bindViewHolder? Q:RecyclerView卡片中持有的资源，到底该什么时候释放？ Q:RecyclerView中各级缓存的用途?各存储结构是什么样的? Q:如何设计一个RecyclerView的item点击事件? Q:RecyclerView的预加载是什么? Q:RecyclerView为什么进行预布局? Q:如何实现RecyclerView的局部更新，用过payload吗,notifyItemChange方法中的参数 Q:RecyclerView中onLayout有哪些步骤流程? RecyclerView.onLayout(...) //布局放置 -&amp;gt;RecyclerView.dispatchLayout() //dispatchLayoutStep1方法等同于pre layout,预布局阶段,记录ViewHolder位置信息；; -&amp;gt;RecyclerView.dispatchLayoutStep1() ///dispatchLayoutStep2方法处理真正布局的地方 -&amp;gt;RecyclerView.dispatchLayoutStep2() //开启动画阶段 -&amp;gt;RecyclerView.dispatchLayoutStep3() -&amp;gt;RecyclerView.dispatchLayoutStepX() //mLayout是LayoutManager的实例\ -&amp;gt;mLayout.onLayoutChildren(mRecycler, mState);\ //此处查看LinearLayoutManager.fill() 注释：填充给定Layout\ -&amp;gt;LinearLayoutManager.fill(recycler, mLayoutState, state, false);\ //循环调用，每次返回一个\ -&amp;gt;LinearLayoutManager.layoutChunk(recycler, layoutState) \ -&amp;gt;LinearLayoutManager.LayoutState.next()\ //通过 Recycler 获取指定位置的 ItemView\ -&amp;gt;RecyclerView.recycler.getViewForPosition(int position)\ //获取ViewHolder 返回ViewHolder中的ItemView,在这里决定是onCreateView还是bindView\ -&amp;gt;RecyclerView.tryGetViewHolderForPositionByDeadline(***) Q:RecyclerView中是如何获取ViewHolder的？有哪些步骤流程? 如果是预布局，尝试从mChangedScrap 中获取ViewHolder 尝试从mAttachedScrap/mHiddenViews/mCachedViews 中获取ViewHolder 如果存在StableId 尝试使用ID从mAttachedScrap中获取ViewHolder 如果用户有自定义缓存，尝试从mViewCacheExtension中获取ViewHolder，一般不会自定义 尝试从mRecyclerPool中获取ViewHolder 如果以上方法均未获取到则创建一个ViewHolder Q:什么是pre-layout?什么时候调用? 当adapter调用notifyItemChanged()或者notifyItemRangeChanged()的时候，onLayoutChildren()会调用两次，一次是预布局，一次是实际布局。通过对比两次布局的不同，RecyclerView可以完成预测动画。
Q:stableID是什么？有什么作用? stableID 作用在于调用notifyDataSetChanged方法后，LayoutManager重新布局的的时候将ViewHolder回收到何处 没有设置StableId，viewHolder被回收到RecyclerViewPool 如果设置了StableId，viewHolder被回收到Scrap中</description>
    </item>
    
    <item>
      <title>View</title>
      <link>https://gyzboy.github.io/interview/android/view/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/view/</guid>
      <description>Q:View.getContext()一定会返回activity对象吗? Q:View.inflate和LayoutInflater.inflate方法区别？ Q:Inflate的三个参数(int resource, ViewGroup root, boolean attachToRoot),组合设置后分别有什么效果? Q:子线程中可以更新UI吗?为什么? Q:View坐标体系是什么? Q:为什么setTranslation会移动View的位置? Q:为什么View移动的位置跟mScrollX，mScrollY是相反的? Q:都有什么获取view区域的方法?怎么用? Q:View的绘制流程分几步，从哪开始？哪个过程结束以后能看到view？ Q:View什么时候发生绘制? Q:遍历ViewGroup中的View Q:ViewGroup有onMeasure方法吗？为什么? Q:setContentView之后发生了什么？ Q:setContentView可以在其他生命周期内执行吗?为什么? Q:view、drawable、bitmap之间的关系? Q:有了view，为什么还要设计drawable? Q:如何设计一个曝光系统?需要注意些什么? Q:有用过LayoutInflater.Factory吗？都有哪些应用场景? Q:如何计算一个Bitmap的内存空间,如何加载一张高清大图?一般的图片加载优化都有哪些手段? Q:一个viewGroup 绘制了4-5个view，当其中一个子view。例如背景变了。就会导致整个viewGroup的刷新。。请问有没有办法？仅仅只让对应的view更改UI。避免让viewGroup重新测量 绘制? Q:在绘制阶段，ViewGroup 不光要绘制自身，还需循环绘制其一众子 View，这个绘制策略默认为顺序绘制，即 [0 ~ childCount)。这个默认的策略，有办法调整吗？修改了之后，事件分发需要特殊处理吗？还是需要特殊处理?getChildAt会有相应变化吗? Q:通过ViewTreeObserver都可以监听什么回调?原理是什么? Q:你知道detachViewFromParent/attachViewToParent 这一组方法在哪些控件中被使用中？detachViewFromParent/attachViewToParent 与 removeView/addView 有什么区别呢？detachViewFromParent/attachViewToParent在什么场景下非常适合使用？ Q:requestLayout和invalidate的区别?都会执行到哪些生命周期? Q:view.requestLayout如果在灭屏或者切home之后调用会怎么样? 锁屏后，调用View.requestLayout()，会往上层层调用requestLayout()吗? 锁屏后，调用View.requestLayout()，会触发View的测量和布局操作吗？ Q:ViewStub是什么?有什么应用场景?原理是什么? Q:系统可以在子线程中访问UI吗？为什么这样设计? Q:为什么Toast和showDialog可以在子线程显示?需要做些什么? Q:View.post为何可以获取宽高信息? Q:View如何转换为Drawable? Q:View.getContext()一定会返回activity对象吗? 并不是,有这么几种情况:
View.inflate的时候手动传的不是activity 当使用AppCompatActivity时,context是TintWrapContext Q:View.inflate和LayoutInflater.inflate方法区别？ View.inflate是对LayoutInflater的封装,其内部就是调用的LayoutInflater.inflate 创建view的方法是LayoutInflater的createViewFromTag方法。会依次调用mFactory2、mFactory和mPrivateFactory三者之一的onCreateView方法去创建一个View。如果不存在Factory，则调用LayoutInflater自身的onCreateView或者createView来实例化View
Q:Inflate的三个参数(int resource, ViewGroup root, boolean attachToRoot),组合设置后分别有什么效果? 如果root为null，attachToRoot将失去作用，则resource布局文件最外层设置任何值都没有意义，仅仅是解析布局文件的子View。 如果root不为null，attachToRoot设为true，则会给布局文件指定一个父布局，即root。（merge作为父布局标签为什么需要attachToRoot设为true的原因）,不需要调用addView 如果root不为null，attachToRoot设为false，则会将布局文件最外层的所有layout属性进行设置，当该view被添加到父view当中时，这些layout属性会自动生效。需要调用addView 在不设置attachToRoot参数的情况下，如果root不为null，attachToRoot参数默认为true；如果root为null，attachToRoot参数为false。 Q:子线程中可以更新UI吗?为什么? 可以,线程检查是在ViewRootImpl的checkThread()中。ViewRootImpl的初始化是在Activity的onResume()方法之后。因此，如果有子线程在onResume之前更新UI是可以成功的。当然还有一种Hook ViewRootImpl的mThread的方法也可以更新UI
Q:View坐标体系是什么? Q:为什么setTranslation会移动View的位置?</description>
    </item>
    
    <item>
      <title>图形系统</title>
      <link>https://gyzboy.github.io/interview/android/%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/</guid>
      <description>Q:SurfaceFlinger是什么?有什么用? Q:什么是Surface? Q:Choreographer是什么?有什么用? Q:Choreographer是如何控制实现在下一个Vsync信号到来时实现View绘制的? Q:ViewRootImpl是如何实现从scheduleTraversals到performTraversals的? Q:Choreograhper是如何触发view绘制的? Q:Choreographer单例是怎么实现的？保存在哪里？ Q:ChoreoGrapher在初始化的时候,都做了什么? Q:一些QA Q:HWC是什么?有什么用? Q:Vsync信号是什么? Q:客户端是如何请求Vsync信号的?是合适触发的? Q:说说Android的多重缓冲? Q:如何设计一个双缓冲的view显示? Q:SurfaceTexture，TextureView, SurfaceView和GLSurfaceView？ SurfaceView: GLSurfaceView: SurfaceTexture: TextureView: Q:SurfaceFlinger是什么?有什么用? SurfaceFlinger负责合成所有的Layer并送显到Display,在Android系统中,SurfaceFlinger是一个独立进程
Q:什么是Surface? Surface是一个窗口，例如：一个Activity是一个Surface、一个Dialog也是一个Surface，承载了上层的图形数据，与SurfaceFlinger侧的Layer相对应
Q:Choreographer是什么?有什么用? 在收到VSync pulse后，将马上开始下一帧的渲染。即一旦收到VSync通知，CPU和GPU就立刻开始计算然后把数据写入buffer。而这一&amp;quot;drawing with VSync&amp;quot; 的实现就是Choreographer
Q:Choreographer是如何控制实现在下一个Vsync信号到来时实现View绘制的? 所有UI的变化都是走到ViewRootImpl的scheduleTraversals()方法。 在VSync信号到来时才会执行绘制，即ViewRootImpl.performTraversals() Q:ViewRootImpl是如何实现从scheduleTraversals到performTraversals的? 首先使用mTraversalScheduled字段保证同时间多次更改只会刷新一次，例如TextView连续两次setText()，也只会走一次绘制流程。 然后把当前线程的消息队列Queue添加了同步屏障，这样就屏蔽了正常的同步消息，保证VSync到来后立即执行绘制，而不是要等前面的同步消息。后面会具体分析同步屏障和异步消息的代码逻辑。 调用了mChoreographer.postCallback()方法，发送一个会在下一帧执行的回调，即在下一个VSync到来时会执行TraversalRunnable&amp;ndash;&amp;gt;doTraversal()&amp;mdash;&amp;gt;performTraversals()&amp;ndash;&amp;gt;绘制流程。 Q:Choreograhper是如何触发view绘制的? Q:Choreographer单例是怎么实现的？保存在哪里？ 在ViewRootImpl构造方法中获取了Choreographer实例 保持在了自己单例的ThreadLocal中 Q:ChoreoGrapher在初始化的时候,都做了什么? 创建了一个mHandler,FrameHandler:传入当前线程Looper,用来分发每一帧事件,主要有三种:有延迟的任务发延迟消息、不在原线程的发到原线程、没开启VSYNC的直接走 doFrame 方法取执行绘制 VSync事件接收器mDisplayEventReceiver,继承runnable:在onVsync回调中将本身将接收器本身作为runnable传入异步消息msg，并使用mHandler发送msg，最终执行的就是doFrame()方法了,这里因为是使用handler发送消息到MessageQueue中，不一定是立刻执行，如何MessageQueue中前面有较为耗时的操作，那么就要等完成，才会执行本次的doFrame() 任务链表数组mCallbackQueues:建一个链表类型CallbackQueue的数组，大小为5，也就是数组中有五个链表，每个链表存相同类型的任务,按照处理优先级依次为：输入、动画、遍历绘制等任务（CALLBACK_INPUT、CALLBACK_ANIMATION、CALLBACK_TRAVERSAL） Q:一些QA 丢帧(掉帧) ，是说 这一帧延迟显示 还是丢弃不再显示 ？ 答：延迟显示，因为缓存交换的时机只能等下一个VSync了。 布局层级较多/主线程耗时 是如何造成 丢帧的呢？ 答：布局层级较多/主线程耗时 会影响CPU/GPU的执行时间，大于16.6ms时只能等下一个VSync了。 16.6ms刷新一次 是啥意思？是每16.6ms都走一次 measure/layout/draw ？ 答：屏幕的固定刷新频率是60Hz，即16.6ms。不是每16.6ms都走一次 measure/layout/draw，而是有绘制任务才会走，并且绘制时间间隔是取决于布局复杂度及主线程耗时。 measure/layout/draw 走完，界面就立刻刷新了吗? 答：不是。measure/layout/draw 走完后 会在VSync到来时进行缓存交换和刷新。 如果界面没动静止了，还会刷新吗？ 答：屏幕会固定没16.</description>
    </item>
    
    <item>
      <title>性能优化</title>
      <link>https://gyzboy.github.io/interview/android/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description> Q:常用内存命令有哪些? Q:启动优化? Q:常用内存命令有哪些? USS	Unique Set Size	物理内存	进程独占的内存 PSS	Proportional Set Size	物理内存	PSS= USS+ 按比例包含共享库 RSS	Resident Set Size	物理内存	RSS= USS+ 包含共享库 VSS	Virtual Set Size	虚拟内存	VSS= RSS+ 未分配实际物理内存 dumpsys meminfo //dumpsys meminfo &amp;ndash;package // 输出指定包名的进程，可能包含多个进程 适用场景： 查看进程的oom adj，或者dalvik/native等区域内存情况，或者某个进程或apk的内存情况，功能非常强大； procrank //适用场景： 查看进程的VSS/RSS/PSS/USS各个内存指标； cat /proc/meminfo //适用场景： 查看系统的详尽内存信息，包含内核情况； free //适用场景： 只查看系统的可用内存； showmap //适用场景： 查看进程的虚拟地址空间的内存分配情况； vmstat //适用场景： 周期性地打印出进程运行队列、系统切换、CPU时间占比等情况 Q:启动优化? attachBaseContext Application attach installContentProviders Application onCreate Looper.loop Activity onCreate，onResume </description>
    </item>
    
    <item>
      <title>注解</title>
      <link>https://gyzboy.github.io/interview/android/%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E6%B3%A8%E8%A7%A3/</guid>
      <description>Q:Android中提供了哪些与线程相关的注解? Q:抽象处理器中四个方法有何作用？annotationProcessor和apt区别？ Q:介绍下ASM? ClassVisitor ClassReader ClassWriter MethodVisitor &amp;amp; AdviceAdapter FieldVisitor Q:ASM的开发流程? Q:Android中提供了哪些与线程相关的注解? @UiThread,通常可以等同于主线程,标注方法需要在UIThread执行,比如View类就使用这个注解 @MainThread 主线程,经常启动后创建的第一个线程 @WorkerThread 工作者线程,一般为一些后台的线程,比如AsyncTask里面的doInBackground就是这样的 @BinderThread 注解方法必须要在BinderThread线程中执行,一般使用较少 Q:抽象处理器中四个方法有何作用？annotationProcessor和apt区别？ 抽象处理器中四个方法有何作用
init(ProcessingEnvironment processingEnvironment): 每一个注解处理器类都必须有一个空的构造函数。然而，这里有一个特殊的init()方法，它会被注解处理工具调用，并输入ProcessingEnviroment参数。ProcessingEnviroment提供很多有用的工具类Elements,Types和Filer。后面我们将看到详细的内容。 process(Set&amp;lt;? extends TypeElement&amp;gt; set, RoundEnvironment roundEnvironment): 这相当于每个处理器的主函数main()。你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素。后面我们将看到详细的内容。 getSupportedAnnotationTypes(): 这里你必须指定，这个注解处理器是注册给哪个注解的。注意，它的返回值是一个字符串的集合，包含本处理器想要处理的注解类型的合法全称。换句话说，你在这里定义你的注解处理器注册到哪些注解上。 getSupportedSourceVersion(): 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。然而，如果你有足够的理由只支持Java 7的话，你也可以返回SourceVersion.RELEASE_7 annotationProcessor和apt区别？
Android 官方的 annotationProcessor 同时支持 javac 和 jack 编译方式，而 android-apt 只支持 javac 方式。当然，目前 android-apt 在 Android Gradle 插件 2.2 版本上面仍然可以正常运行，如果你没有想支持 jack 编译方式的话，可以继续使用 android-apt。 Q:自定义注解又是怎么分类的？运行期注解原理是什么？ @Retention 定义： @Retention(RetentionPolicy.SOURCE) 源码时注解，一般用来作为编译器标记。如Override, Deprecated, SuppressWarnings。 @Retention(RetentionPolicy.RUNTIME) 运行时注解，在运行时通过反射去识别的注解。 定义运行时注解，只需要在声明注解时指定@Retention(RetentionPolicy.RUNTIME)即可。 运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但灵活性好，实现起来比较简答。 @Retention(RetentionPolicy.</description>
    </item>
    
    <item>
      <title>消息通信</title>
      <link>https://gyzboy.github.io/interview/android/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1/</guid>
      <description>Q:Linux都有哪些进程间通信方式（IPC）？Android呢? Q:什么是Binder?为什么使用Binder作为Android IPC？ Q:Intent是如何进行进程间通信的? Q:什么是mmap? Q:为什么有共享内存了还需要设计Binder? Q:ServiceManager启动流程? Q:Binder线程池? Q:Binder创建的内核内存大小? Q:Binder进程与线程? Q:系统服务与bindService等启动的服务的区别? Q:Binder请求的同步与异步? Q:如果有多个进程向用一个Server服务发出Binder请求处理?会发生什么? Q:Binder是如何进行权限控制的? Q:什么情况下会触发Binder的linkToDeath?如何触发? Q:Android中哪些IPC用到了Socket,为什么? Q:Handler是什么? Q:Handler机制主要包含什么?各自用途是什么? Q:Looper.prepare可以多次调用吗?为什么? Q:Handler中消息分发顺序? Q:Handle中有几种消息类型? Q:用过Message的setAsynchronous吗?有什么用? Q:Looper 死循环为什么不会导致应用卡死，会消耗大量资源吗？ Q:主线程的Handler是在ActivityThread中启动的,那么他是一个线程吗?不是的话,那么主线程所依附的线程是什么? Q:为什么handler会造成内存泄漏?如何处理? Q:handler的postDelay是如何实现的? Q:Linux都有哪些进程间通信方式（IPC）？Android呢? Linux:
管道：在创建时分配一个page大小的内存，缓存区大小比较有限； 消息队列：信息复制两次，额外的CPU消耗；不合适频繁或信息量大的通信； 共享内存：无须复制，共享缓冲区直接付附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决； 套接字：作为更通用的接口，传输效率低，主要用于不通机器或跨网络的通信； 信号量：常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。 信号: 不适用于信息交换，更适用于进程中断控制，比如非法内存访问，杀死某个进程等； Android: Binder Socket Handler Q:什么是Binder?为什么使用Binder作为Android IPC？ 使用mmap只拷贝一次内存使Binder变的高效 binder_mmap通过加锁，保证一次只有一个进程分配内存，保证多进程间的并发访问。 虚拟进程地址空间(vm_area_struct)和虚拟内核地址空间(vm_struct)都映射到同一块物理内存空间。当Client端与Server端发送数据时，Client（作为数据发送端）先从自己的进程空间把IPC通信数据copy_from_user拷贝到内核空间，而Server端（作为数据接收端）与内核共享数据，不再需要拷贝数据，而是通过内存地址空间的偏移量，即可获悉内存地址，整个过程只发生一次内存拷贝 Q:Intent是如何进行进程间通信的? Q:什么是mmap? mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系
Q:为什么有共享内存了还需要设计Binder? 共享内存实现方式复杂，没有客户与服务端之别， 需要充分考虑到访问临界资源的并发同步问题，否则可能会出现死锁等问题；从这稳定性角度看，Binder架构优越于共享内存
效率：传输效率主要影响因素是内存拷贝的次数，拷贝次数越少，传输速率越高。从Android进程架构角度分析：对于消息队列、Socket和管道来说，数据先从发送方的缓存区拷贝到内核开辟的缓存区中，再从内核缓存区拷贝到接收方的缓存区，一共两次拷贝。 而对于Binder来说，数据从发送方的缓存区拷贝到内核的缓存区，而接收方的缓存区与内核的缓存区是映射到同一块物理地址的，节省了一次数据拷贝的过程
稳定性：共享内存不需要拷贝，Binder的性能仅次于共享内存。共享内存的性能优于Binder，那为什么不采用共享内存呢，因为共享内存需要处理并发同步问题，容易出现死锁和资源竞争(C/S同时访问一个资源)，稳定性较差。Socket虽然是基于C/S架构的，但是它主要是用于网络间的通信且传输效率较低。Binder基于C/S架构 ，Server端与Client端相对独立，稳定性较好。
安全性：传统Linux IPC的接收方无法获得对方进程可靠的UID/PID，从而无法鉴别对方身份；而Binder机制为每个进程分配了UID/PID，且在Binder通信时会根据UID/PID进行有效性检测。
Q:ServiceManager启动流程? 打开binder驱动，并调用mmap()方法分配128k的内存映射空间：binder_open(); 通知binder驱动使其成为守护进程：binder_become_context_manager()； 验证selinux权限，判断进程是否有权注册或查看指定服务； 进入循环状态，等待Client端的请求：binder_loop()。 注册服务的过程，根据服务名称，但同一个服务已注册，重新注册前会先移除之前的注册信息； 死亡通知: 当binder所在进程死亡后,会调用binder_release方法,然后调用binder_node_release.这个过程便会发出死亡通知的回调. Q:Binder线程池? Binder线程池是通过ProcessState中的startThreadPool进行创建的,通过mThreadPoolStarted变量控制每个进程有且只有一个Binder线程池,在创建时会新建一个用于与主线程通信的binder线程 Binder线程创建与其所在进程的创建中产生,默认地，每个进程的binder线程池的线程个数上限为15,创建的binder线程个数上限为8
Q:Binder创建的内核内存大小? 1M-8k,8K是为了内存优化</description>
    </item>
    
    <item>
      <title>组件化</title>
      <link>https://gyzboy.github.io/interview/android/%E7%BB%84%E4%BB%B6%E5%8C%96/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E7%BB%84%E4%BB%B6%E5%8C%96/</guid>
      <description>Q:组件化与模块化区别? Q:业务组件，如何实现单独运行调试？ Q:业务组件间 没有依赖，如何实现页面的跳转？ Q:业务组件间 没有依赖，如何实现组件间通信/方法调用？ Q:业务组件不能反向依赖壳工程，如何获取Application实例、如何获取Application onCreate()回调（用于任务初始化）？ Q:如何实现一个路由框架? Q:组件化与模块化区别? 组件化:组件化，去除模块间的耦合，使得每个业务模块可以独立当做App存在，对于其他模块没有直接的依赖关系 模块化:模块化就是拆分成多个模块放在不同的Module里面，每个功能的代码都在自己所属的 module 中添加 Q:业务组件，如何实现单独运行调试？ 单工程方案，组件以module形式存在，动态配置组件的工程类型； 动态修改gradle文件,集成时变为Library插件,独立调试时变为Application插件 动态配置ApplicationId 和 AndroidManifest 多工程方案，业务组件以library module形式存在于独立的工程，且只有这一个library module。 业务组件以library module形式存在于独立的工程 发布到Maven仓库,通过引入第三方依赖方式使用 Q:业务组件间 没有依赖，如何实现页面的跳转？ 使用路由
Q:业务组件间 没有依赖，如何实现组件间通信/方法调用？ 服务暴露组件 Q:业务组件不能反向依赖壳工程，如何获取Application实例、如何获取Application onCreate()回调（用于任务初始化）？ 通过AppLifeCycle回调
Q:如何实现一个路由框架? 不使用注解器 手动把每个界面和相应的Activity对应起来。这个处理过程可以在Application里面做的 routers.put(&amp;#34;router://activity/main&amp;#34;, MainActivity.class); routers.put(&amp;#34;router://activity/main2&amp;#34;, Main2Activity.class); routers.put(&amp;#34;router://activity/main3&amp;#34;, Main3Activity.class); //通过scheme实现跳转 Class aClass = mTables.get(path); Intent intent = new Intent(context, aClass); if (!(context instanceof Activity)) { intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); } context.startActivity(intent); 使用注解器 自动生成用于注册activity的map代码 2.1、 继承AbstractProcessor 每一个处理器都继承与AbstractProcessor,这些方法java虚拟机会自动调用 public class MyProcessor extends AbstractProcessor { @Override public synchronized void init(ProcessingEnvironment env){ } @Override public boolean process(Set&amp;lt;?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gyzboy.github.io/interview/android/%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gyzboy.github.io/interview/android/%E5%8A%A8%E7%94%BB/</guid>
      <description> Q:View动画为何不能真正改变View的位置？而属性动画为何可以？属性动画是如何改变View的属性？ Q:属性动画插值器和估值器的作用？插值器和估值器分别是如何更改动画的？ </description>
    </item>
    
  </channel>
</rss>
