<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 十万个为什么</title>
    <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 十万个为什么</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 16:12:16 +0800</lastBuildDate><atom:link href="https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>概述 二叉树的最近公共祖先  Q:给定一个二叉树, 找到该树中两个指定节点的最近公共祖先   二叉树的最小深度  Q:给定一个二叉树，找出其最小深度     概述    二叉树主要考察满二叉树和完全二叉树,
 可以用来解决问题的方法:
 涉及到二叉树的构造:先序遍历 求普通二叉树的属性:后序遍历,单纯求深度就用前序 求二叉搜索树的属性:中序遍历 递归    确定递归函数的参数和返回值 确定终止条件 确定单层递归的逻辑    问题类型: 二叉树的最近公共祖先    Q:给定一个二叉树, 找到该树中两个指定节点的最近公共祖先    输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 输出：3   关键点
 递归   private boolean dfs(TreeNode root, TreeNode p, TreeNode q) { if (root == null) return false;//定义出口  boolean lson = dfs(root.</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>最长递增子序列  Q:给你一个整数数组 nums ，找到其中最长严格递增子序列的长度   零钱兑换 [真题]  Q:给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1   最长公共子序列 [真题]  Q:给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0   最大子序和 [真题]  Q:给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和   买卖股票 [真题]  Q:给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和     最长递增子序列    Q:给你一个整数数组 nums ，找到其中最长严格递增子序列的长度    输入：nums = [10,9,2,5,3,7,101,18] 输出：4 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4   关键点</description>
    </item>
    
    <item>
      <title>哈希表</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>概述 有效的字母异位词  Q:给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词     概述    哈希表是根据关键码的值而直接进行访问的数据结构
 可以解决的问题类型:
 用来快速判断一个元素是否出现集合里   有效的字母异位词    Q:给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词    输入:s=&amp;quot;anagram&amp;quot; t=&amp;quot;nagaram&amp;quot; 输出:true   关键点
 数组其实就是一个简单哈希表 字符a到字符z的ASCII是26个连续的数值,可以用当前字母ASCII值减去‘a’的ASCII值作为数组下标   bool isAnagram(string s, string t) { int record[26] = {0}; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>概述 替换空格  Q:把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;   重复串  Q:给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成   最长回文子串  Q:你一个字符串 s，找到 s 中最长的回文子串。   最小覆盖子串  Q:给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &amp;quot;&amp;quot;     概述    字符串类类型的题目，往往想法比较简单，但是实现起来并不容易，复杂的字符串题目非常考验对代码的掌控能力
 可以用来解决问题的方法:
 双指针法 KMP算法(当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了)   替换空格    Q:把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;     输入：s = &amp;quot;We are happy.</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</guid>
      <description>用最少数量的箭引爆气球  Q:找边界射爆气球   合并边界  Q:以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间   经典排序  冒泡排序 选择排序 插入排序 希尔排序 归并排序 快速排序 堆排序     用最少数量的箭引爆气球    Q:找边界射爆气球    输入：points = [[10,16],[2,8],[1,6],[7,12]] 输出：2   关键点
 排序,找右边界 贪心   public int findMinArrowShots(int[][] points) { if (points.length == 0) { return 0; } Arrays.sort(points, new Comparator&amp;lt;int[]&amp;gt;() { public int compare(int[] point1, int[] point2) { if (point1[1] &amp;gt; point2[1]) { return 1; } else if (point1[1] &amp;lt; point2[1]) { return -1; } else { return 0; } } }); //[[1,6],[2,8],[7,12],[10,16]]  int pos = points[0][1]; int ans = 1; for (int[] balloon: points) { if (balloon[0] &amp;gt; pos) {//不断改变右边界  pos = balloon[1]; ++ans; } } return ans; } 合并边界    Q:以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间    输入：intervals = [[1,3],[2,6],[8,10],[15,18]] 输出：[[1,6],[8,10],[15,18]]   关键点</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/</guid>
      <description>概述 有序数组索引  Q:从排序数组中找到目标值并返回其索引   原地删除元素  Q:给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度?   最小子串  Q:给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0   俄罗斯套娃  Q:给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）   最长连续递增序列  Q:给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。   盛最多水的容器  Q:给你 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。   和为K的子数组  Q:给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数     概述    数组是存放在连续内存空间上的相同类型数据的集合</description>
    </item>
    
    <item>
      <title>算法模板</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</guid>
      <description>二分查找法 KMP 二叉树  深度优先遍历（递归） 深度优先遍历（迭代法） 广度优先遍历（队列） 二叉树深度 二叉树节点数量   回溯算法 并查集   二分查找法    class Solution { public: int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); int left = 0; int right = n; // 我们定义target在左闭右开的区间里，[left, right) while (left &amp;lt; right) { // 因为left == right的时候，在[left, right)是无效的空间 int middle = left + ((right - left) &amp;gt;&amp;gt; 1); if (nums[middle] &amp;gt; target) { right = middle; // target 在左区间，因为是左闭右开的区间，nums[middle]一定不是我们的目标值，所以right = middle，在[left, middle)中继续寻找目标值 } else if (nums[middle] &amp;lt; target) { left = middle + 1; // target 在右区间，在 [middle+1, right)中 } else { // nums[middle] == target return middle; // 数组中找到目标值的情况，直接返回下标 } } return right; } }; KMP    void kmp(int* next, const string&amp;amp; s){ next[0] = -1; int j = -1; for(int i = 1; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 13 Apr 2021 16:12:16 +0800</pubDate>
      
      <guid>https://gyzboy.github.io/interview/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</guid>
      <description>概述 删除给定值的节点  Q:删除链表中等于给定值 val 的所有节点   反转链表  Q:反转一个单链表   删除倒数第k个节点  Q:给定一链表,删除倒数第K个节点   环形链表  Q:给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null   是否是回文链表  Q:判断一个链表是否为回文链表   合并链表  Q:合并K个有序链表   找交点  Q:找到两个单链表相交的起始节点     概述    链表的种类主要为：单链表，双链表，循环链表,链表的节点在内存中是分散存储的，通过指针连在一起
 可以用来解决问题的方法:
 虚拟头结点 双指针 分治法   删除给定值的节点    Q:删除链表中等于给定值 val 的所有节点    输入:1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6,val=6 输出:1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5   关键点</description>
    </item>
    
  </channel>
</rss>
